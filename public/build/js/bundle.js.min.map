{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["horas","document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","console","log","listadoHorasArray","Array","from","filter","dataset","horaId","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","respuesta","arrayPonentes","ponente","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","tag","etiqueta","createElement","ondblclick","eliminarTag","appendChild","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){\n    const horas = document.querySelector('#horas');\n\n    let busqueda = {\n        categoria_id : '',\n        dia: ''\n    }\n\n    if(horas){\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\n        const dias = document.querySelectorAll('[name=\"dia\"]');\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\n\n        categoria.addEventListener('change', terminoBusqueda);\n        dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\n\n        function terminoBusqueda(e){\n            busqueda[e.target.name] = e.target.value;\n\n            // Reiniciar los campos ocultos y el selector de horas \n            inputHiddenHora.value = '';\n            inputHiddenDia.value = '';\n\n            // Deshabilitar la hora previa si hay un nuevo click\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n            if(horaPrevia){\n                horaPrevia.classList.remove('horas__hora--seleccionada');\n            }\n\n            if(Object.values(busqueda).includes('')){\n                return;\n            }\n\n            buscarEventos();\n        }\n\n        async function buscarEventos() {\n            const {dia, categoria_id} = busqueda;\n            const url = `/api/eventos-horarios?dia_id=${dia}&categoria_id=${categoria_id}`;\n            const resultado = await fetch(url);\n            const eventos = await resultado.json();\n\n            obtenerHorasDisponibles(eventos);\n        }\n\n        function obtenerHorasDisponibles(eventos) {\n\n            // Reiniciar las horas\n            const listadoHoras = document.querySelectorAll('#horas li');\n            listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitada'));\n\n            // Comprobar eventos ya tomados y quitar la clase deshabilitado\n            const horasTomadas = eventos.map(evento => evento.hora_id);\n            console.log(horasTomadas);\n            \n            const listadoHorasArray = Array.from(listadoHoras);\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\n\n            resultado.forEach(li => li.classList.remove('horas__hora--deshabilitada'));\n            \n            const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\n            horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\n        }\n\n        function seleccionarHora(e) {\n\n            // Deshabilitar la hora previa si hay un nuevo click\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n            if(horaPrevia){\n                horaPrevia.classList.remove('horas__hora--seleccionada');\n            }\n\n            // Agregar clase de seleccionado\n            e.target.classList.add('horas__hora--seleccionada');\n\n            inputHiddenHora.value = e.target.dataset.horaId;\n            console.log(e.target.dataset.horaId);\n\n            // Llenar el campo oculto dia\n            inputHiddenDia.value = document.querySelector('[name=dia]:checked').value;\n        }\n    }\n})();","(function() {\n    const ponentesInput = document.querySelector('#ponentes');\n\n    if(ponentesInput){\n\n        let ponentes = [];\n        let ponentesFiltrados = [];\n\n        obtenerPonentes();\n\n        ponentesInput.addEventListener('input', buscarPonentes);\n\n        async function obtenerPonentes() {\n            \n            const url = `/api/ponentes`;\n            const respuesta = await fetch(url);\n            const resultado = await respuesta.json();\n\n            formatearPonentes(resultado);\n        }\n\n        function formatearPonentes(arrayPonentes = []) {\n\n            ponentes = arrayPonentes.map(ponente => {\n                return {\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\n                    id: ponente.id\n                }\n            })\n        }\n\n        function buscarPonentes(e) {\n            \n            const busqueda = e.target.value;\n\n            if(busqueda.length > 3){\n                // Expresion regular\n                // Sirve para buscar sin importar mayusculas o minusculas\n                const expresion = new RegExp(busqueda, \"i\");\n\n                ponentesFiltrados = ponentes.filter(ponente => {\n                    if(ponente.nombre.toLowerCase().search(expresion) != -1){\n                        return ponente;\n                    }\n                });\n\n                console.log(ponentesFiltrados);\n            }\n        }\n    }\n\n})();","(function() {\n    const tagsInput = document.querySelector('#tags_input');\n\n    if(tagsInput){\n\n        const tagsDiv = document.querySelector('#tags');\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\n        let tags = [];\n\n        // Recuperar el input oculto\n        if(tagsInputHidden.value !== ''){\n            tags = tagsInputHidden.value.split(',');\n            mostrarTags();\n        }\n\n        // Escuchar los cambios en el input \n        tagsInput.addEventListener('keypress', guardarTag);\n\n        function guardarTag(e) {\n            if(e.keyCode === 44){\n\n                if(e.target.value.trim() === '' || e.target.value < 1){\n                    return\n                }\n\n                e.preventDefault(); //Evita que se ecriba la coma\n                tags = [...tags, e.target.value.trim()];\n                tagsInput.value = '';\n                mostrarTags();\n            }\n        }\n\n        function mostrarTags() {\n            tagsDiv.textContent = '';\n            tags.forEach(tag => {\n                const etiqueta = document.createElement('LI');\n                etiqueta.classList.add('formulario__tag');\n                etiqueta.textContent = tag;\n                etiqueta.ondblclick = eliminarTag;\n                tagsDiv.appendChild(etiqueta);\n            })\n\n            actualizarInputHidden();\n        }\n\n        function eliminarTag(e) {\n            e.target.remove();\n            tags = tags.filter(tag => tag !== e.target.textContent);\n            actualizarInputHidden();\n        }\n\n        function actualizarInputHidden() {\n            tagsInputHidden.value = tags.toString();\n        }\n\n    }\n\n})()"]}